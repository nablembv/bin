#!/usr/bin/python3

import re
import sys
import os
import xml.etree.ElementTree as ET

ENCODING = 'utf-8'


def assess(path):
    feed = ET.parse(path, ET.XMLParser(encoding=ENCODING))
    root = feed.getroot()
    ns = "http://www.bazaarvoice.com/xs/PRR/StandardClientFeed/14.7"
    ET.register_namespace("", ns)

    print("Number of reviews: {0}".format(
        len(list(root.iter("{%s}Review" % ns)))))
    # for child in root.iter("{%s}Review" % ns):
    #     print(child)


def decode(path):
    if '/' in path:
        filename_extract = re.compile('(.*/)([a-zA-Z0-9_-]+)(\.xml)$')
        prev = filename_extract.match(path).group(1)
        name = filename_extract.match(path).group(2)
        ext = filename_extract.match(path).group(3)
        log = '{0}{1}_errslog.txt'.format(prev, name, ext)
    else:
        filename_extract = re.compile('([a-zA-Z0-9_-]+)(\.xml)$')
        name = filename_extract.match(path).group(1)
        ext = filename_extract.match(path).group(2)
        log = '{0}_errslog.txt'.format(name, ext)

    with open(path, 'r', encoding=ENCODING) as file:
        xml_string = file.read()

    special_pattern = re.compile(
        r'([^<>=a-zA-Z0-9:/;._!,?@`´#\'\"\n\r\t\s\\\[\]\(\)+*\}\{„“”“‚‘’|^¨€$%~&\u00c0-\u017e™°–-]+)')
    arrow_pattern = re.compile(
        r'(>[\n\r\t\s]*[=a-zA-Z0-9:/;._!,?@`´#\'\"\\\[\]\(\)+*\}\{„“”“‚‘’|^¨€$%~&\u00c0-\u017e™°–-]+[\n\r\t\s=a-zA-Z0-9:/;._!,?@`´#\'\"\\\[\]\(\)+*\}\{„“”“‚‘’|^¨€$%~&\u00c0-\u017e™°–-]+)( ?< ?)([\n\r\t\s=a-zA-Z0-9:/;._!,?@`´#\'\"\\\[\]\(\)+*\}\{„“”“‚‘’|^¨€$%~&\u00c0-\u017e™°–-]+</)')
    heart_pattern = re.compile(
        r'(<3)')

    matches = []
    matches.append('---- SPECIAL PATTERNS ----')
    for match in re.findall(special_pattern, xml_string):
        matches.append(match)
    matches.append('---- ARROW PATTERNS ----')
    for match in re.findall(arrow_pattern, xml_string):
        matches.append(match)
    matches.append('---- HEART PATTERNS ----')
    for match in re.findall(heart_pattern, xml_string):
        matches.append(match)
    with open(log, 'a', encoding=ENCODING) as log_file:
        for match in matches:
            log_file.write(''.join(match))
            log_file.write('\n')


if __name__ == "__main__":
    xml_pattern = re.compile(r'.*\.xml$')
    if sys.argv[2:] and xml_pattern.match(sys.argv[1]) and os.path.exists(sys.argv[1]):
        if sys.argv[2] == '--decode':
            decode(sys.argv[1])
        elif sys.argv[2] == '--assess':
            assess(sys.argv[1])
        else:
            print('Provide correct command.')
    else:
        print('Couldn\'t parse that file.')
